const {ethers} = require("hardhat");
const {expect} = require("chai");


describe("MAPO ServiceRelayV3 start test", () =>{
    let owner;
    let addr1;

    let relay;
    let lightNode;
    let wrapped;
    let echo;
    let feeService;

    beforeEach(async () =>{
        [owner, addr1] = await ethers.getSigners();
    })

    it('constract deploy init', async function () {

        let relayContract = await ethers.getContractFactory("MapoServiceRelayV3");
        relay = await relayContract.deploy();
        console.log("mosMessageRelay address:",relay.address);

        let wrappedContract = await ethers.getContractFactory("Wrapped");
        wrapped = await wrappedContract.deploy();
        console.log("Wrapped:",wrapped.address);

        let lightNodeContract = await ethers.getContractFactory("LightClientManager");
        lightNode = await  lightNodeContract.deploy();

        let EchoContract = await ethers.getContractFactory("Echo");
        echo = await  EchoContract.deploy();

        let data  = await relay.initialize(wrapped.address,lightNode.address);

        let proxyContract = await ethers.getContractFactory("MapoServiceProxyV3");
        let proxy = await proxyContract.deploy(relay.address,data.data);
        await proxy.deployed()
        relay = relayContract.attach(proxy.address);

        let feeContract = await ethers.getContractFactory("FeeService");
        feeService = await  feeContract.deploy();

    });

    it('mosMessage set ', async function () {
        await relay.registerChain(5,"0x5FC8d32690cc91D4c39d9d3abcBD16989F875707","1");

        await relay.addWhiteList(echo.address,true);

        await relay.addWhiteList(owner.address,true);


        await relay.setFeeService(feeService.address);

        await echo.setWhiteList(relay.address);

        await feeService.setMessageFee(97,echo.address,100);

    });

    it('transferOut start test ', async function () {

        let data = await echo.getData("hello","hello world");

        console.log(echo.address)

        await relay.transferOut("97",[echo.address,data,"5000000","0"],{value:100});

        await expect(relay.transferOut("212",[echo.address,data,"5000000","0"],{value:100})).to.be.revertedWith("Only other chain");


    });

    it('transferIn start test ', async function () {

        expect(await echo.EchoList("hello")).to.equal("");

        let receiptProof = "0xf902c0f902bd945fc8d32690cc91d4c39d9d3abcbd16989f875707f863a056877b1dbedc6754c111b951146b820fe6b723af0213fc415d44b05e1758dd85a00000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000000d4b90240990d2a2ca04d3c48afd73f275a61e9fe79b16c87451862b65592d3a3860e52a6000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144a679253410272dd5232b3ff7cf5dbb88f29531900000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4dd1d382400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

        await relay.transferIn(5,receiptProof);

        expect(await echo.EchoList("hello")).to.equal("hello world");

        //hello -> hello world bsc chain
        let receiptProof97 = "0xf902c0f902bd9470e0ba845a1a0f2da3359c97e0285013525ffc49f863a056877b1dbedc6754c111b951146b820fe6b723af0213fc415d44b05e1758dd85a00000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000000000000000000000000000000000000000000061b902408d4d1387c8de13d77cc304c7cdb694f90c524fe6926ec1608f93773beada1b14000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144a679253410272dd5232b3ff7cf5dbb88f29531900000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4dd1d382400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001568656c6c6f20776f726c642062736320636861696e000000000000000000000000000000000000000000000000000000000000000000000000000000"

        await relay.transferIn(5,receiptProof97);

        expect(await echo.EchoList("hello")).to.equal("hello world");

    });

})




